# INCISO A) Evaluaci칩n de poliniomios utilizando 4 diferentes algoritmos.

# Algoritmo 1:
def poly_naive(A, x):
    p = 0
    for i, a in enumerate(reversed(A)):
        p += (x ** i) * a
    return p

# Algoritmo 2:    
def poly_iter(A, x):
    p = 0
    xn = 1
    for a in reversed(A):
        p += xn * a
        xn *= x
    return p

# Algoritmo 3:
def poly_horner(A, x):
    p = A[-1]
    i = len(A) - 2
    while i >= 0:
        p = p * x + A[i]
        i -= 1
    return p

# Algoritmo 4:
def horner(A, x):
    ac = 0
    for i in (A):
        ac = ac * x + i
    return ac

# INCISO B) Replica de una gr치fica sin utilizar la libreria pylab

# Gr치fica original
from __future__ import print_function,division
### http://www-personal.umich.edu/~mejn/computational-physics/

from google.colab import drive
drive.mount('/content/drive')
from pylab import scatter,xlabel,ylabel,xlim,ylim,show
from numpy import loadtxt

data = loadtxt(r"/content/drive/MyDrive/Colab Notebooks/stars.dat",float)
x = data[:,0]
y = data[:,1]

scatter(x,y)
xlabel("Temperature")
ylabel("Magnitude")
xlim(0,13000)
ylim(-5,20)
show()

# Gr치fica replicada
from google.colab import drive
drive.mount('/content/drive')
from numpy import loadtxt
import matplotlib.pyplot as plt

data = loadtxt(r"/content/drive/MyDrive/Colab Notebooks/stars.dat",float)
x = data[:,0]
y = data[:,1]

plt.plot(x, y, color=plt.cm.Blues(7/10), marker="o", linestyle="")
plt.xlabel("Temperature")
plt.ylabel("Magnitude")
plt.ylim(-5, 20)
plt.xlim(0, 13000)
plt.show()
